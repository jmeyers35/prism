// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(prism_coreFFI)
    import prism_coreFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len: 0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_prism_core_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_prism_core_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        lock()
        defer { self.unlock() }
        return try f()
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_UNEXPECTED_ERROR: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_UNEXPECTED_ERROR:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void
) {
    do {
        try writeReturn(makeCall())
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> Void,
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

    func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        map.count
    }
}

// Public interface members begin here.

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol CoreSessionProtocol: AnyObject {
    func baseRevision() throws -> Revision?

    func diffForRange(range: RevisionRange) throws -> Diff

    func diffHead() throws -> Diff

    func headRevision() throws -> Revision?

    func refresh() throws -> RepositorySnapshot

    func repositoryInfo() throws -> RepositoryInfo

    func snapshot() throws -> RepositorySnapshot

    func workspaceStatus() throws -> WorkspaceStatus
}

open class CoreSession:
    CoreSessionProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    public required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public init(noPointer _: NoPointer) {
        pointer = nil
    }

    #if swift(>=5.8)
        @_documentation(visibility: private)
    #endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_prism_core_fn_clone_coresession(self.pointer, $0) }
    }

    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_prism_core_fn_free_coresession(pointer, $0) }
    }

    open func baseRevision() throws -> Revision? {
        return try FfiConverterOptionTypeRevision.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_base_revision(self.uniffiClonePointer(), $0)
        })
    }

    open func diffForRange(range: RevisionRange) throws -> Diff {
        return try FfiConverterTypeDiff.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_diff_for_range(self.uniffiClonePointer(),
                                                                   FfiConverterTypeRevisionRange.lower(range), $0)
        })
    }

    open func diffHead() throws -> Diff {
        return try FfiConverterTypeDiff.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_diff_head(self.uniffiClonePointer(), $0)
        })
    }

    open func headRevision() throws -> Revision? {
        return try FfiConverterOptionTypeRevision.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_head_revision(self.uniffiClonePointer(), $0)
        })
    }

    open func refresh() throws -> RepositorySnapshot {
        return try FfiConverterTypeRepositorySnapshot.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_refresh(self.uniffiClonePointer(), $0)
        })
    }

    open func repositoryInfo() throws -> RepositoryInfo {
        return try FfiConverterTypeRepositoryInfo.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_repository_info(self.uniffiClonePointer(), $0)
        })
    }

    open func snapshot() throws -> RepositorySnapshot {
        return try FfiConverterTypeRepositorySnapshot.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_snapshot(self.uniffiClonePointer(), $0)
        })
    }

    open func workspaceStatus() throws -> WorkspaceStatus {
        return try FfiConverterTypeWorkspaceStatus.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
            uniffi_prism_core_fn_method_coresession_workspace_status(self.uniffiClonePointer(), $0)
        })
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCoreSession: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = CoreSession

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> CoreSession {
        return CoreSession(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: CoreSession) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CoreSession {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: CoreSession, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCoreSession_lift(_ pointer: UnsafeMutableRawPointer) throws -> CoreSession {
    return try FfiConverterTypeCoreSession.lift(pointer)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeCoreSession_lower(_ value: CoreSession) -> UnsafeMutableRawPointer {
    return FfiConverterTypeCoreSession.lower(value)
}

public struct Diff {
    public var range: RevisionRange
    public var files: [DiffFile]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(range: RevisionRange, files: [DiffFile]) {
        self.range = range
        self.files = files
    }
}

extension Diff: Equatable, Hashable {
    public static func == (lhs: Diff, rhs: Diff) -> Bool {
        if lhs.range != rhs.range {
            return false
        }
        if lhs.files != rhs.files {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(range)
        hasher.combine(files)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiff: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Diff {
        return
            try Diff(
                range: FfiConverterTypeRevisionRange.read(from: &buf),
                files: FfiConverterSequenceTypeDiffFile.read(from: &buf)
            )
    }

    public static func write(_ value: Diff, into buf: inout [UInt8]) {
        FfiConverterTypeRevisionRange.write(value.range, into: &buf)
        FfiConverterSequenceTypeDiffFile.write(value.files, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiff_lift(_ buf: RustBuffer) throws -> Diff {
    return try FfiConverterTypeDiff.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiff_lower(_ value: Diff) -> RustBuffer {
    return FfiConverterTypeDiff.lower(value)
}

public struct DiffFile {
    public var path: String
    public var oldPath: String?
    public var status: FileStatus
    public var stats: DiffStats
    public var isBinary: Bool
    public var hunks: [DiffHunk]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(path: String, oldPath: String?, status: FileStatus, stats: DiffStats, isBinary: Bool, hunks: [DiffHunk]) {
        self.path = path
        self.oldPath = oldPath
        self.status = status
        self.stats = stats
        self.isBinary = isBinary
        self.hunks = hunks
    }
}

extension DiffFile: Equatable, Hashable {
    public static func == (lhs: DiffFile, rhs: DiffFile) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.oldPath != rhs.oldPath {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.stats != rhs.stats {
            return false
        }
        if lhs.isBinary != rhs.isBinary {
            return false
        }
        if lhs.hunks != rhs.hunks {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(oldPath)
        hasher.combine(status)
        hasher.combine(stats)
        hasher.combine(isBinary)
        hasher.combine(hunks)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffFile: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffFile {
        return
            try DiffFile(
                path: FfiConverterString.read(from: &buf),
                oldPath: FfiConverterOptionString.read(from: &buf),
                status: FfiConverterTypeFileStatus.read(from: &buf),
                stats: FfiConverterTypeDiffStats.read(from: &buf),
                isBinary: FfiConverterBool.read(from: &buf),
                hunks: FfiConverterSequenceTypeDiffHunk.read(from: &buf)
            )
    }

    public static func write(_ value: DiffFile, into buf: inout [UInt8]) {
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterOptionString.write(value.oldPath, into: &buf)
        FfiConverterTypeFileStatus.write(value.status, into: &buf)
        FfiConverterTypeDiffStats.write(value.stats, into: &buf)
        FfiConverterBool.write(value.isBinary, into: &buf)
        FfiConverterSequenceTypeDiffHunk.write(value.hunks, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffFile_lift(_ buf: RustBuffer) throws -> DiffFile {
    return try FfiConverterTypeDiffFile.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffFile_lower(_ value: DiffFile) -> RustBuffer {
    return FfiConverterTypeDiffFile.lower(value)
}

public struct DiffHunk {
    public var header: DiffRange
    public var section: String?
    public var lines: [DiffLine]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(header: DiffRange, section: String?, lines: [DiffLine]) {
        self.header = header
        self.section = section
        self.lines = lines
    }
}

extension DiffHunk: Equatable, Hashable {
    public static func == (lhs: DiffHunk, rhs: DiffHunk) -> Bool {
        if lhs.header != rhs.header {
            return false
        }
        if lhs.section != rhs.section {
            return false
        }
        if lhs.lines != rhs.lines {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(header)
        hasher.combine(section)
        hasher.combine(lines)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffHunk: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffHunk {
        return
            try DiffHunk(
                header: FfiConverterTypeDiffRange.read(from: &buf),
                section: FfiConverterOptionString.read(from: &buf),
                lines: FfiConverterSequenceTypeDiffLine.read(from: &buf)
            )
    }

    public static func write(_ value: DiffHunk, into buf: inout [UInt8]) {
        FfiConverterTypeDiffRange.write(value.header, into: &buf)
        FfiConverterOptionString.write(value.section, into: &buf)
        FfiConverterSequenceTypeDiffLine.write(value.lines, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffHunk_lift(_ buf: RustBuffer) throws -> DiffHunk {
    return try FfiConverterTypeDiffHunk.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffHunk_lower(_ value: DiffHunk) -> RustBuffer {
    return FfiConverterTypeDiffHunk.lower(value)
}

public struct DiffLine {
    public var kind: DiffLineKind
    public var text: String
    public var baseLine: UInt32?
    public var headLine: UInt32?
    public var highlights: [LineHighlight]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(kind: DiffLineKind, text: String, baseLine: UInt32?, headLine: UInt32?, highlights: [LineHighlight]) {
        self.kind = kind
        self.text = text
        self.baseLine = baseLine
        self.headLine = headLine
        self.highlights = highlights
    }
}

extension DiffLine: Equatable, Hashable {
    public static func == (lhs: DiffLine, rhs: DiffLine) -> Bool {
        if lhs.kind != rhs.kind {
            return false
        }
        if lhs.text != rhs.text {
            return false
        }
        if lhs.baseLine != rhs.baseLine {
            return false
        }
        if lhs.headLine != rhs.headLine {
            return false
        }
        if lhs.highlights != rhs.highlights {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(kind)
        hasher.combine(text)
        hasher.combine(baseLine)
        hasher.combine(headLine)
        hasher.combine(highlights)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffLine: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffLine {
        return
            try DiffLine(
                kind: FfiConverterTypeDiffLineKind.read(from: &buf),
                text: FfiConverterString.read(from: &buf),
                baseLine: FfiConverterOptionUInt32.read(from: &buf),
                headLine: FfiConverterOptionUInt32.read(from: &buf),
                highlights: FfiConverterSequenceTypeLineHighlight.read(from: &buf)
            )
    }

    public static func write(_ value: DiffLine, into buf: inout [UInt8]) {
        FfiConverterTypeDiffLineKind.write(value.kind, into: &buf)
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterOptionUInt32.write(value.baseLine, into: &buf)
        FfiConverterOptionUInt32.write(value.headLine, into: &buf)
        FfiConverterSequenceTypeLineHighlight.write(value.highlights, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffLine_lift(_ buf: RustBuffer) throws -> DiffLine {
    return try FfiConverterTypeDiffLine.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffLine_lower(_ value: DiffLine) -> RustBuffer {
    return FfiConverterTypeDiffLine.lower(value)
}

public struct DiffRange {
    public var baseStart: UInt32
    public var baseLines: UInt32
    public var headStart: UInt32
    public var headLines: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(baseStart: UInt32, baseLines: UInt32, headStart: UInt32, headLines: UInt32) {
        self.baseStart = baseStart
        self.baseLines = baseLines
        self.headStart = headStart
        self.headLines = headLines
    }
}

extension DiffRange: Equatable, Hashable {
    public static func == (lhs: DiffRange, rhs: DiffRange) -> Bool {
        if lhs.baseStart != rhs.baseStart {
            return false
        }
        if lhs.baseLines != rhs.baseLines {
            return false
        }
        if lhs.headStart != rhs.headStart {
            return false
        }
        if lhs.headLines != rhs.headLines {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseStart)
        hasher.combine(baseLines)
        hasher.combine(headStart)
        hasher.combine(headLines)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffRange: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffRange {
        return
            try DiffRange(
                baseStart: FfiConverterUInt32.read(from: &buf),
                baseLines: FfiConverterUInt32.read(from: &buf),
                headStart: FfiConverterUInt32.read(from: &buf),
                headLines: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: DiffRange, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.baseStart, into: &buf)
        FfiConverterUInt32.write(value.baseLines, into: &buf)
        FfiConverterUInt32.write(value.headStart, into: &buf)
        FfiConverterUInt32.write(value.headLines, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffRange_lift(_ buf: RustBuffer) throws -> DiffRange {
    return try FfiConverterTypeDiffRange.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffRange_lower(_ value: DiffRange) -> RustBuffer {
    return FfiConverterTypeDiffRange.lower(value)
}

public struct DiffStats {
    public var additions: UInt32
    public var deletions: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(additions: UInt32, deletions: UInt32) {
        self.additions = additions
        self.deletions = deletions
    }
}

extension DiffStats: Equatable, Hashable {
    public static func == (lhs: DiffStats, rhs: DiffStats) -> Bool {
        if lhs.additions != rhs.additions {
            return false
        }
        if lhs.deletions != rhs.deletions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(additions)
        hasher.combine(deletions)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffStats: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffStats {
        return
            try DiffStats(
                additions: FfiConverterUInt32.read(from: &buf),
                deletions: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: DiffStats, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.additions, into: &buf)
        FfiConverterUInt32.write(value.deletions, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffStats_lift(_ buf: RustBuffer) throws -> DiffStats {
    return try FfiConverterTypeDiffStats.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffStats_lower(_ value: DiffStats) -> RustBuffer {
    return FfiConverterTypeDiffStats.lower(value)
}

public struct LineHighlight {
    public var startColumn: UInt32
    public var endColumn: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(startColumn: UInt32, endColumn: UInt32) {
        self.startColumn = startColumn
        self.endColumn = endColumn
    }
}

extension LineHighlight: Equatable, Hashable {
    public static func == (lhs: LineHighlight, rhs: LineHighlight) -> Bool {
        if lhs.startColumn != rhs.startColumn {
            return false
        }
        if lhs.endColumn != rhs.endColumn {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(startColumn)
        hasher.combine(endColumn)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeLineHighlight: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LineHighlight {
        return
            try LineHighlight(
                startColumn: FfiConverterUInt32.read(from: &buf),
                endColumn: FfiConverterUInt32.read(from: &buf)
            )
    }

    public static func write(_ value: LineHighlight, into buf: inout [UInt8]) {
        FfiConverterUInt32.write(value.startColumn, into: &buf)
        FfiConverterUInt32.write(value.endColumn, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLineHighlight_lift(_ buf: RustBuffer) throws -> LineHighlight {
    return try FfiConverterTypeLineHighlight.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeLineHighlight_lower(_ value: LineHighlight) -> RustBuffer {
    return FfiConverterTypeLineHighlight.lower(value)
}

public struct RepositoryInfo {
    public var root: String
    public var defaultBranch: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(root: String, defaultBranch: String?) {
        self.root = root
        self.defaultBranch = defaultBranch
    }
}

extension RepositoryInfo: Equatable, Hashable {
    public static func == (lhs: RepositoryInfo, rhs: RepositoryInfo) -> Bool {
        if lhs.root != rhs.root {
            return false
        }
        if lhs.defaultBranch != rhs.defaultBranch {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(root)
        hasher.combine(defaultBranch)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRepositoryInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RepositoryInfo {
        return
            try RepositoryInfo(
                root: FfiConverterString.read(from: &buf),
                defaultBranch: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: RepositoryInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.root, into: &buf)
        FfiConverterOptionString.write(value.defaultBranch, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRepositoryInfo_lift(_ buf: RustBuffer) throws -> RepositoryInfo {
    return try FfiConverterTypeRepositoryInfo.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRepositoryInfo_lower(_ value: RepositoryInfo) -> RustBuffer {
    return FfiConverterTypeRepositoryInfo.lower(value)
}

public struct RepositorySnapshot {
    public var info: RepositoryInfo
    public var workspace: WorkspaceStatus
    public var revisions: RevisionRange?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(info: RepositoryInfo, workspace: WorkspaceStatus, revisions: RevisionRange?) {
        self.info = info
        self.workspace = workspace
        self.revisions = revisions
    }
}

extension RepositorySnapshot: Equatable, Hashable {
    public static func == (lhs: RepositorySnapshot, rhs: RepositorySnapshot) -> Bool {
        if lhs.info != rhs.info {
            return false
        }
        if lhs.workspace != rhs.workspace {
            return false
        }
        if lhs.revisions != rhs.revisions {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(info)
        hasher.combine(workspace)
        hasher.combine(revisions)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRepositorySnapshot: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RepositorySnapshot {
        return
            try RepositorySnapshot(
                info: FfiConverterTypeRepositoryInfo.read(from: &buf),
                workspace: FfiConverterTypeWorkspaceStatus.read(from: &buf),
                revisions: FfiConverterOptionTypeRevisionRange.read(from: &buf)
            )
    }

    public static func write(_ value: RepositorySnapshot, into buf: inout [UInt8]) {
        FfiConverterTypeRepositoryInfo.write(value.info, into: &buf)
        FfiConverterTypeWorkspaceStatus.write(value.workspace, into: &buf)
        FfiConverterOptionTypeRevisionRange.write(value.revisions, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRepositorySnapshot_lift(_ buf: RustBuffer) throws -> RepositorySnapshot {
    return try FfiConverterTypeRepositorySnapshot.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRepositorySnapshot_lower(_ value: RepositorySnapshot) -> RustBuffer {
    return FfiConverterTypeRepositorySnapshot.lower(value)
}

public struct Revision {
    public var oid: String
    public var reference: String?
    public var summary: String?
    public var author: Signature?
    public var committer: Signature?
    public var timestamp: Int64?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(oid: String, reference: String?, summary: String?, author: Signature?, committer: Signature?, timestamp: Int64?) {
        self.oid = oid
        self.reference = reference
        self.summary = summary
        self.author = author
        self.committer = committer
        self.timestamp = timestamp
    }
}

extension Revision: Equatable, Hashable {
    public static func == (lhs: Revision, rhs: Revision) -> Bool {
        if lhs.oid != rhs.oid {
            return false
        }
        if lhs.reference != rhs.reference {
            return false
        }
        if lhs.summary != rhs.summary {
            return false
        }
        if lhs.author != rhs.author {
            return false
        }
        if lhs.committer != rhs.committer {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(oid)
        hasher.combine(reference)
        hasher.combine(summary)
        hasher.combine(author)
        hasher.combine(committer)
        hasher.combine(timestamp)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevision: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Revision {
        return
            try Revision(
                oid: FfiConverterString.read(from: &buf),
                reference: FfiConverterOptionString.read(from: &buf),
                summary: FfiConverterOptionString.read(from: &buf),
                author: FfiConverterOptionTypeSignature.read(from: &buf),
                committer: FfiConverterOptionTypeSignature.read(from: &buf),
                timestamp: FfiConverterOptionInt64.read(from: &buf)
            )
    }

    public static func write(_ value: Revision, into buf: inout [UInt8]) {
        FfiConverterString.write(value.oid, into: &buf)
        FfiConverterOptionString.write(value.reference, into: &buf)
        FfiConverterOptionString.write(value.summary, into: &buf)
        FfiConverterOptionTypeSignature.write(value.author, into: &buf)
        FfiConverterOptionTypeSignature.write(value.committer, into: &buf)
        FfiConverterOptionInt64.write(value.timestamp, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevision_lift(_ buf: RustBuffer) throws -> Revision {
    return try FfiConverterTypeRevision.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevision_lower(_ value: Revision) -> RustBuffer {
    return FfiConverterTypeRevision.lower(value)
}

public struct RevisionRange {
    public var base: Revision?
    public var head: Revision

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(base: Revision?, head: Revision) {
        self.base = base
        self.head = head
    }
}

extension RevisionRange: Equatable, Hashable {
    public static func == (lhs: RevisionRange, rhs: RevisionRange) -> Bool {
        if lhs.base != rhs.base {
            return false
        }
        if lhs.head != rhs.head {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(base)
        hasher.combine(head)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeRevisionRange: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RevisionRange {
        return
            try RevisionRange(
                base: FfiConverterOptionTypeRevision.read(from: &buf),
                head: FfiConverterTypeRevision.read(from: &buf)
            )
    }

    public static func write(_ value: RevisionRange, into buf: inout [UInt8]) {
        FfiConverterOptionTypeRevision.write(value.base, into: &buf)
        FfiConverterTypeRevision.write(value.head, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevisionRange_lift(_ buf: RustBuffer) throws -> RevisionRange {
    return try FfiConverterTypeRevisionRange.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeRevisionRange_lower(_ value: RevisionRange) -> RustBuffer {
    return FfiConverterTypeRevisionRange.lower(value)
}

public struct Signature {
    public var name: String
    public var email: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, email: String?) {
        self.name = name
        self.email = email
    }
}

extension Signature: Equatable, Hashable {
    public static func == (lhs: Signature, rhs: Signature) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.email != rhs.email {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(email)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeSignature: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Signature {
        return
            try Signature(
                name: FfiConverterString.read(from: &buf),
                email: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: Signature, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.email, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignature_lift(_ buf: RustBuffer) throws -> Signature {
    return try FfiConverterTypeSignature.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeSignature_lower(_ value: Signature) -> RustBuffer {
    return FfiConverterTypeSignature.lower(value)
}

public struct WorkspaceStatus {
    public var currentBranch: String?
    public var dirty: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(currentBranch: String?, dirty: Bool) {
        self.currentBranch = currentBranch
        self.dirty = dirty
    }
}

extension WorkspaceStatus: Equatable, Hashable {
    public static func == (lhs: WorkspaceStatus, rhs: WorkspaceStatus) -> Bool {
        if lhs.currentBranch != rhs.currentBranch {
            return false
        }
        if lhs.dirty != rhs.dirty {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currentBranch)
        hasher.combine(dirty)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeWorkspaceStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WorkspaceStatus {
        return
            try WorkspaceStatus(
                currentBranch: FfiConverterOptionString.read(from: &buf),
                dirty: FfiConverterBool.read(from: &buf)
            )
    }

    public static func write(_ value: WorkspaceStatus, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.currentBranch, into: &buf)
        FfiConverterBool.write(value.dirty, into: &buf)
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeWorkspaceStatus_lift(_ buf: RustBuffer) throws -> WorkspaceStatus {
    return try FfiConverterTypeWorkspaceStatus.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeWorkspaceStatus_lower(_ value: WorkspaceStatus) -> RustBuffer {
    return FfiConverterTypeWorkspaceStatus.lower(value)
}

public enum CoreError {
    case NotARepository(message: String)

    case BareRepository(message: String)

    case MissingHeadRevision(message: String)

    case Git(message: String)

    case Io(message: String)

    case Unimplemented(message: String)

    case Internal(message: String)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeCoreError: FfiConverterRustBuffer {
    typealias SwiftType = CoreError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CoreError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return try .NotARepository(
                message: FfiConverterString.read(from: &buf)
            )

        case 2: return try .BareRepository(
                message: FfiConverterString.read(from: &buf)
            )

        case 3: return try .MissingHeadRevision(
                message: FfiConverterString.read(from: &buf)
            )

        case 4: return try .Git(
                message: FfiConverterString.read(from: &buf)
            )

        case 5: return try .Io(
                message: FfiConverterString.read(from: &buf)
            )

        case 6: return try .Unimplemented(
                message: FfiConverterString.read(from: &buf)
            )

        case 7: return try .Internal(
                message: FfiConverterString.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CoreError, into buf: inout [UInt8]) {
        switch value {
        case .NotARepository(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(1))
        case .BareRepository(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(2))
        case .MissingHeadRevision(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(3))
        case .Git(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(4))
        case .Io(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(5))
        case .Unimplemented(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(6))
        case .Internal(_ /* message is ignored*/ ):
            writeInt(&buf, Int32(7))
        }
    }
}

extension CoreError: Equatable, Hashable {}

extension CoreError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum DiffLineKind {
    case context
    case addition
    case deletion
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeDiffLineKind: FfiConverterRustBuffer {
    typealias SwiftType = DiffLineKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DiffLineKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .context

        case 2: return .addition

        case 3: return .deletion

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DiffLineKind, into buf: inout [UInt8]) {
        switch value {
        case .context:
            writeInt(&buf, Int32(1))

        case .addition:
            writeInt(&buf, Int32(2))

        case .deletion:
            writeInt(&buf, Int32(3))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffLineKind_lift(_ buf: RustBuffer) throws -> DiffLineKind {
    return try FfiConverterTypeDiffLineKind.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeDiffLineKind_lower(_ value: DiffLineKind) -> RustBuffer {
    return FfiConverterTypeDiffLineKind.lower(value)
}

extension DiffLineKind: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FileStatus {
    case added
    case deleted
    case modified
    case renamed
    case copied
    case typeChange
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public struct FfiConverterTypeFileStatus: FfiConverterRustBuffer {
    typealias SwiftType = FileStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FileStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .added

        case 2: return .deleted

        case 3: return .modified

        case 4: return .renamed

        case 5: return .copied

        case 6: return .typeChange

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FileStatus, into buf: inout [UInt8]) {
        switch value {
        case .added:
            writeInt(&buf, Int32(1))

        case .deleted:
            writeInt(&buf, Int32(2))

        case .modified:
            writeInt(&buf, Int32(3))

        case .renamed:
            writeInt(&buf, Int32(4))

        case .copied:
            writeInt(&buf, Int32(5))

        case .typeChange:
            writeInt(&buf, Int32(6))
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFileStatus_lift(_ buf: RustBuffer) throws -> FileStatus {
    return try FfiConverterTypeFileStatus.lift(buf)
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
public func FfiConverterTypeFileStatus_lower(_ value: FileStatus) -> RustBuffer {
    return FfiConverterTypeFileStatus.lower(value)
}

extension FileStatus: Equatable, Hashable {}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionUInt32: FfiConverterRustBuffer {
    typealias SwiftType = UInt32?

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt32.write(value, into: &buf)
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt32.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionInt64: FfiConverterRustBuffer {
    typealias SwiftType = Int64?

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterInt64.write(value, into: &buf)
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeRevision: FfiConverterRustBuffer {
    typealias SwiftType = Revision?

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevision.write(value, into: &buf)
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevision.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeRevisionRange: FfiConverterRustBuffer {
    typealias SwiftType = RevisionRange?

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRevisionRange.write(value, into: &buf)
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRevisionRange.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterOptionTypeSignature: FfiConverterRustBuffer {
    typealias SwiftType = Signature?

    static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSignature.write(value, into: &buf)
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSignature.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeDiffFile: FfiConverterRustBuffer {
    typealias SwiftType = [DiffFile]

    static func write(_ value: [DiffFile], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDiffFile.write(item, into: &buf)
        }
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DiffFile] {
        let len: Int32 = try readInt(&buf)
        var seq = [DiffFile]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDiffFile.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeDiffHunk: FfiConverterRustBuffer {
    typealias SwiftType = [DiffHunk]

    static func write(_ value: [DiffHunk], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDiffHunk.write(item, into: &buf)
        }
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DiffHunk] {
        let len: Int32 = try readInt(&buf)
        var seq = [DiffHunk]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDiffHunk.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeDiffLine: FfiConverterRustBuffer {
    typealias SwiftType = [DiffLine]

    static func write(_ value: [DiffLine], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeDiffLine.write(item, into: &buf)
        }
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [DiffLine] {
        let len: Int32 = try readInt(&buf)
        var seq = [DiffLine]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeDiffLine.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
private struct FfiConverterSequenceTypeLineHighlight: FfiConverterRustBuffer {
    typealias SwiftType = [LineHighlight]

    static func write(_ value: [LineHighlight], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLineHighlight.write(item, into: &buf)
        }
    }

    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LineHighlight] {
        let len: Int32 = try readInt(&buf)
        var seq = [LineHighlight]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeLineHighlight.read(from: &buf))
        }
        return seq
    }
}

public func open(path: String) throws -> CoreSession {
    return try FfiConverterTypeCoreSession.lift(rustCallWithError(FfiConverterTypeCoreError.lift) {
        uniffi_prism_core_fn_func_open(
            FfiConverterString.lower(path), $0
        )
    })
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_prism_core_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_prism_core_checksum_func_open() != 3223 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_base_revision() != 990 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_diff_for_range() != 39197 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_diff_head() != 50676 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_head_revision() != 42265 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_refresh() != 20035 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_repository_info() != 62133 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_snapshot() != 2927 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_prism_core_checksum_method_coresession_workspace_status() != 61824 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all
