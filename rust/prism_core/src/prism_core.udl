[Error]
enum CoreError {
  "NotARepository",
  "BareRepository",
  "MissingHeadRevision",
  "Git",
  "Io",
  "Unimplemented",
  "Internal",
  "PluginNotRegistered",
  "Plugin"
};

[Enum]
interface FileStatus {
  Added();
  Deleted();
  Modified();
  Renamed();
  Copied();
  TypeChange();
};

[Enum]
interface DiffLineKind {
  Context();
  Addition();
  Deletion();
};

dictionary Signature {
  string name;
  string? email;
};

dictionary Revision {
  string oid;
  string? reference;
  string? summary;
  Signature? author;
  Signature? committer;
  i64? timestamp;
};

dictionary RevisionRange {
  Revision? base;
  Revision head;
};

dictionary RepositoryInfo {
  string root;
  string? default_branch;
};

dictionary WorkspaceStatus {
  string? current_branch;
  boolean dirty;
};

dictionary RepositorySnapshot {
  RepositoryInfo info;
  WorkspaceStatus workspace;
  RevisionRange? revisions;
};

dictionary DiffStats {
  u32 additions;
  u32 deletions;
};

dictionary DiffRange {
  u32 base_start;
  u32 base_lines;
  u32 head_start;
  u32 head_lines;
};

dictionary LineHighlight {
  u32 start_column;
  u32 end_column;
};

dictionary DiffLine {
  DiffLineKind kind;
  string text;
  u32? base_line;
  u32? head_line;
  sequence<LineHighlight> highlights;
};

dictionary DiffHunk {
  DiffRange header;
  string? section;
  sequence<DiffLine> lines;
};

dictionary DiffFile {
  string path;
  string? old_path;
  FileStatus status;
  DiffStats stats;
  boolean is_binary;
  sequence<DiffHunk> hunks;
};

dictionary Diff {
  RevisionRange range;
  sequence<DiffFile> files;
};

[Enum]
interface Severity {
  Info();
  Warning();
  Error();
};

[Enum]
interface DiffSide {
  Base();
  Head();
};

dictionary Position {
  u32 line;
  u32? column;
};

dictionary Range {
  Position start;
  Position end;
};

dictionary FileRange {
  string path;
  DiffSide side;
  Range range;
};

dictionary TextEdit {
  FileRange location;
  string replacement;
};

dictionary Suggestion {
  string? title;
  sequence<TextEdit> edits;
};

dictionary Diagnostic {
  string title;
  string? detail;
  Severity severity;
  FileRange location;
  sequence<string> tags;
  sequence<Suggestion> suggestions;
};

dictionary CommentDraft {
  string body;
  FileRange location;
};

dictionary ThreadRef {
  string id;
  string? title;
};

dictionary PluginCapabilities {
  boolean supports_list_threads;
  boolean supports_attach_without_thread;
  boolean supports_polling;
};

dictionary PluginSummary {
  string id;
  string label;
  PluginCapabilities capabilities;
};

dictionary PluginSession {
  string plugin_id;
  string session_id;
  ThreadRef? thread;
};

dictionary ReviewPayload {
  string? summary;
  sequence<string> actions;
  sequence<CommentDraft> comments;
  sequence<Diagnostic> diagnostics;
};

dictionary SubmissionResult {
  boolean revision_started;
  string? reference;
  string? message;
};

[Enum]
interface RevisionState {
  Pending();
  InProgress();
  Completed();
  Failed();
};

dictionary RevisionProgress {
  RevisionState state;
  string? detail;
};

interface CoreSession {
  [Throws=CoreError]
  RepositorySnapshot snapshot();
  [Throws=CoreError]
  RepositorySnapshot refresh();
  [Throws=CoreError]
  RepositoryInfo repository_info();
  [Throws=CoreError]
  WorkspaceStatus workspace_status();
  [Throws=CoreError]
  Revision? head_revision();
  [Throws=CoreError]
  Revision? base_revision();
  [Throws=CoreError]
  Diff diff_head();
  [Throws=CoreError]
  Diff diff_for_range(RevisionRange range);
  sequence<PluginSummary> plugins();
  [Throws=CoreError]
  sequence<ThreadRef> plugin_threads(string plugin_id);
  [Throws=CoreError]
  PluginSession attach_plugin(string plugin_id, string? thread_id);
  [Throws=CoreError]
  SubmissionResult post_review(PluginSession session, ReviewPayload payload);
  [Throws=CoreError]
  RevisionProgress poll_revision(PluginSession session);
};

namespace prism_core {
  [Throws=CoreError]
  CoreSession open(string path);
};
